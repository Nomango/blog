---
export interface Props {
  target: string;
}

const { target } = Astro.props;
---

<medium-zoom data-target={target}></medium-zoom>

<script>
  import mediumZoom from "medium-zoom";

  class ZoomComp extends HTMLElement {
    constructor() {
      super();

      document.addEventListener("astro:page-load", () => {
        const target = this.dataset.target;
        const imgs = document.querySelectorAll(`${target}`);
        if (imgs.length === 0) {
          return;
        }
        if (window.zoom === undefined) {
          window.zoom = mediumZoom({
            background: "rgba(0, 0, 0, 0.8)",
          });
        }
        const zoom = window.zoom;
        zoom.detach();
        zoom.attach(imgs);
      });
    }
  }

  customElements.define("medium-zoom", ZoomComp);
</script>

<style is:global>
  .medium-zoom-overlay {
    position: fixed;
    top: 0;
    right: 0;
    bottom: 0;
    left: 0;
    opacity: 0;
    transition: opacity 300ms;
    will-change: opacity;
  }

  .medium-zoom--opened .medium-zoom-overlay {
    cursor: pointer;
    cursor: zoom-out;
    opacity: 1;
  }

  .medium-zoom-image {
    cursor: pointer;
    cursor: zoom-in;
    /*
    The `transition` is marked as "!important" for the animation to happen
    even though it's overriden by another inline `transition` style attribute.

    This is problematic with frameworks that generate inline styles on their
    images (e.g. Gatsby).

    See https://github.com/francoischalifour/medium-zoom/issues/110
   */
    transition: transform 300ms cubic-bezier(0.2, 0, 0.2, 1) !important;
  }

  .medium-zoom-image--hidden {
    visibility: hidden;
  }

  .medium-zoom-image--opened {
    position: relative;
    cursor: pointer;
    cursor: zoom-out;
    will-change: transform;
  }
</style>

---
import type { Post } from "@utils/getPosts";
import Posts from "@layouts/Posts.astro";
import PostDetails from "@layouts/PostDetails.astro";
import getPageNumbers from "@utils/getPageNumbers";
import slugify, { getPostSlugs } from "@utils/slugify";
import { SITE } from "@config";
import getPosts, { getSortedPosts } from "@utils/getPosts";

export interface Props {
  post: Post;
}

export async function getStaticPaths() {
  const posts = await getPosts();
  const postResult = posts.reduce(
    (all, post) => {
      return [
        ...all,
        ...getPostSlugs(post).map(slug => ({
          params: { slug },
          props: { post },
        })),
      ];
    },
    [] as { params: any; props: Props }[]
  );

  const pagePaths = getPageNumbers(posts.length).map(pageNum => ({
    params: { slug: String(pageNum) },
  }));

  return [...postResult, ...pagePaths];
}

const { slug } = Astro.params;
const { post } = Astro.props;

if (post && slug !== slugify(post)) {
  return Astro.redirect(`/posts/${slugify(post)}`, 302);
}

const posts = await getPosts();

const sortedPosts = getSortedPosts(posts);

const totalPages = getPageNumbers(sortedPosts.length);

const currentPage =
  slug && !isNaN(Number(slug)) && totalPages.includes(Number(slug))
    ? Number(slug)
    : 0;
const lastPost = currentPage * SITE.postPerPage;
const startPost = lastPost - SITE.postPerPage;

const paginatedPosts = sortedPosts.slice(startPost, lastPost);
---

{
  post ? (
    <PostDetails post={post} />
  ) : (
    <Posts
      posts={paginatedPosts}
      pageNum={currentPage}
      totalPages={totalPages.length}
    />
  )
}

---
import Layout from "@layouts/Layout.astro";
import Header from "@components/Header.astro";
import Footer from "@components/Footer.astro";
import Tag from "@components/Tag.astro";
import Comment from "@components/comment/index.astro";
import Datetime from "@components/Datetime";
import slugify from "@utils/slugify";
import type { Post } from "@utils/getPosts";

export interface Props {
  post: Post;
}

const { post } = Astro.props;

const { title, author, description, ogImage, canonicalURL, date: pubDatetime, tags } = post.data;

const { Content } = await post.render();

const ogImageUrl = typeof ogImage === "string" ? ogImage : ogImage?.src;
const ogUrl = new URL(ogImageUrl ?? `/posts/${slugify(post)}.png`, Astro.url.origin).href;
---

<Layout title={title} author={author} description={description} ogImage={ogUrl} canonicalURL={canonicalURL}>
  <Header />

  <div class="mx-auto flex w-full max-w-3xl justify-start px-2">
    <button
      class="focus-outline mb-2 mt-8 flex hover:opacity-75"
      onclick="history.length > 1 ? history.back() : location.href = '/posts'"
    >
      <svg xmlns="http://www.w3.org/2000/svg"
        ><path d="M13.293 6.293 7.586 12l5.707 5.707 1.414-1.414L10.414 12l4.293-4.293z"></path>
      </svg><span>Go back</span>
    </button>
  </div>
  <main id="main-content" class="post-detail">
    <h1 class="post-title" transition:name={`post-${slugify(post)}`}>
      {title}
    </h1>

    <div class="my-2 flex flex-col sm:flex-row sm:gap-6">
      <Datetime datetime={pubDatetime} size="lg" />

      <ul class="tags-container">
        {tags.map(tag => <Tag name={tag} />)}
      </ul>
    </div>

    <article id="article" role="article" class="prose mx-auto mt-8 max-w-3xl">
      {
        description && (
          <blockquote>
            <p>{description}</p>
          </blockquote>
        )
      }
      <Content />
    </article>

    <Comment slug={slugify(post)} />
  </main>
  <Footer />

  <!-- font awesome -->
  <link
    rel="stylesheet"
    href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css"
    integrity="sha512-z3gLpd7yknf1YoNbCzqRKc4qyor8gaKU1qmn+CShxbuBusANI9QpRohGBreCFkKxLhei6S9CQXFEbbKuqLg0DA=="
    crossorigin="anonymous"
    referrerpolicy="no-referrer"
  />
</Layout>

<script>
  import mediumZoom from "medium-zoom/dist/pure";
  import "medium-zoom/dist/style.css";

  const zoom = mediumZoom({
    background: "rgba(0, 0, 0, 0.8)",
  });

  // listen to astro:page-load event to handle the first loading
  document.addEventListener("astro:page-load", () => {
    zoom.detach();
    zoom.attach("main.post-detail img");
  });
</script>

<style is:global>
  .medium-zoom-overlay, .medium-zoom-image--opened {
    z-index: 99;
  }
</style>

<script>
  async function renderDiagrams(graphs: HTMLCollectionOf<Element>) {
    const { default: mermaid } = await import("mermaid");
    mermaid.initialize({
      startOnLoad: false,
      fontFamily: "var(--sans-font)",
      theme: window.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "default",
    });
    for (const graph of graphs) {
      const content = graph.getAttribute("data-content");
      if (!content) continue;
      let svg = document.createElement("svg");
      const id = (svg.id = "mermaid-" + Math.round(Math.random() * 100000));
      graph.appendChild(svg);
      mermaid.render(id, content).then(result => {
        graph.innerHTML = result.svg;
      });
    }
  }

  const graphs = document.getElementsByClassName("mermaid");
  if (document.getElementsByClassName("mermaid").length > 0) {
    renderDiagrams(graphs);
  }
</script>

<style>
  main {
    @apply mx-auto w-full max-w-3xl px-4 pb-12;
  }
  .post-title {
    @apply text-2xl font-semibold text-skin-accent;
  }
  .tags-container {
    @apply my-0;
  }
</style>
